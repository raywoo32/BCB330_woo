# Author: Rachel Woo
# Purpose: To Format and Display AME results
# Date: Feb. 2019
# Contact: rachelsam.woo@mail.utoronto.ca
###### 1. INSTALL REQUIRED PACKAGES ######
if (! requireNamespace("readr")) {
install.packages("readr")
}
if (! requireNamespace("ggplot2")) {
install.packages("ggplot2")
}
if (! requireNamespace("rlist")) {
install.packages(pkgs="rlist")
}
###### 2. IMPORT AME DATA INTO DATAFRAMES ######
rootDirectory = "C:/Users/rwoo/Documents/BCB330_Github/results/elegans/p1_ame_results"
setwd(rootDirectory)
moduleList <- list()
for (i in 1:14) {
subpath = paste(rootDirectory, i, sep="/")
print(subpath)
setwd(subpath) # Paste concatenates strings
moduleDF <- readr::read_tsv(file.path(".", "ame.tsv"),
skip = 1, #skip gets rid of header
col_names = c("rank",	"motif_DB",	"motif_ID",
"motif_alt_ID",	"consensus",	"p-value",
"adj_p-value",	"E-value",	"tests",
"FASTA_max",	"pos",	"neg",	"PWM_min",
"TP","	%TP",	"FP",	"%FP"))
moduleList[[i]] <- moduleDF
setwd(rootDirectory)
getwd()
}
# Get rid of rows that do not contain data (Last 3 rows)
for (i in 1:length(moduleList)) {
module <- moduleList[[i]]
deleteColumns <- c(nrow(module), (nrow(module) - 1), (nrow(module) - 2))
moduleList[[i]] <- module[-deleteColumns,]
}
###### 3. INITIALIZE EMPTY MATRICIES ######
# Initialize 3 empty matricies for 3 different trees
binaryMatrix <- data.frame(matrix(0, nrow = 100, ncol = 14))
evalMatrix <- data.frame(matrix(0, nrow = 100, ncol = 14))
tpMatrix <- data.frame(matrix(0, nrow = 100, ncol = 14))
# Vector to name rows of dataframe
colNames <- c("1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14")
colnames(evalMatrix) <- colNames
colnames(tpMatrix) <- colNames
colnames(binaryMatrix) <- colNames
###### ANALYSIS 1: BINARY ########
# 1. Add data into Empty Matrix
for (moduleIndex in 1:length(moduleList)) {
module = moduleList[[moduleIndex]]
for (i in 1:NROW(module)) {
motif_ID = module$motif_ID[i]
binaryMatrix[motif_ID, moduleIndex] <- 1
}
}
# 2. Make CSV, Distance Matrix, Cluster and Plot
write.csv(binaryMatrix,"C:/Users/rwoo/Desktop/p1_ame_results/elegansAMEp1_binary.csv",
row.names = TRUE)
#Flip the matrix for correct input value
distanceInputBinary <- t(binaryMatrix)
distanceMatrixBinary <- dist(distanceInputBinary, method = "binary")
clusterBinary <- hclust(distanceMatrixBinary)
# Plot
plot(clusterBinary, main="", xlab="", ylab="Height", sub="")
# Export Plot
jpeg("binaryDendro.jpg", width = 350, height = 350)
plot(clusterBinary, main="", xlab="", ylab="Height", sub="")
dev.off()
# Heatmap
heatmap(as.matrix(binaryMatrix))
# Export Plot
jpeg("binaryHeat.jpg", width = 1000, height = 1000)
heatmap(as.matrix(binaryMatrix))
dev.off()
###### ANALYSIS 2: 10-E-VALUE ######
# 1. Add data into Empty Matrix
for (moduleIndex in 1:length(moduleList)) {
module = moduleList[[moduleIndex]]
for (i in 1:NROW(module)) {
motif_ID = module$motif_ID[i]
eval = module$`E-value`[i]
evalMod = 10 - eval #So the highest numbers are better (in e-value lower is better)
evalMatrix[motif_ID, moduleIndex] <- evalMod
}
}
# 2. Make CSV, Distance Matrix, Cluster, Dendrogram and Heatmap
write.csv(evalMatrix,"C:/Users/rwoo/Desktop/p1_ame_results/elegansAMEp1_evalue.csv",
row.names = TRUE)
#Flip the matrix for correct input value
distanceInputEval <- t(evalMatrix)
distanceMatrixEval <- dist(distanceInputEval, method = "euclidian")
clusterEval <- hclust(distanceMatrixEval) #is complete method
# Plot
plot(clusterEval, main="", xlab="", ylab="Height", sub="")
# Export Plot
jpeg("evalDendro.jpg", width = 350, height = 350)
plot(clusterEval, main="", xlab="", ylab="Height", sub="")
dev.off()
# Heatmap
heatmap(as.matrix(evalMatrix))
# Export Plot
jpeg("evalHeat.jpg", width = 1000, height = 1000)
heatmap(as.matrix(evalMatrix))
dev.off()
###### ANALYSIS 3: TRUE POSITIVE VALUE ######
# 1. Add data into Empty Matrix
for (moduleIndex in 1:length(moduleList)) {
module = moduleList[[moduleIndex]]
for (i in 1:NROW(module)) {
motif_ID = module$motif_ID[i]
tp = module$`	%TP`[i]
tpMatrix[motif_ID, moduleIndex] <- tp
}
}
# 2. Make CSV, Distance Matrix, Cluster, Dendrogram and Heatmap
write.csv(tpMatrix,"C:/Users/rwoo/Desktop/p1_ame_results/elegansAMEp1_tp.csv",
row.names = TRUE)
#Flip the matrix for correct input value
distanceInputTP <- t(tpMatrix)
distanceMatrixTP <- dist(distanceInputTP, method = "euclidian")
clusterTP <- hclust(distanceMatrixTP)
clusterTP <- hclust(distanceMatrixTP, method="ward.D2")
# Tree
plot(clusterTP, main="", xlab="", ylab="Height", sub="")
# Export Plot
jpeg("tpDendro.jpg", width = 350, height = 350)
plot(clusterTP, main="", xlab="", ylab="Height", sub="")
dev.off()
# Heatmap
heatmap(as.matrix(tpMatrix))
# Export Plot
jpeg("tpHeat.jpg", width = 1000, height = 1000)
heatmap(as.matrix(tpMatrix))
dev.off()
#flcust, gaussian mixed model, based on emc model.
#
#ADD legend for COLOUR #TODO
#TODO add motif to side DE, transform
#TODO: cluster default r or better algorithm
# TODO: Redo AME for elegans, grey module, 10 and 11 module and all green
###### CITATIONS ######
# http://www.sthda.com/english/wiki/creating-and-saving-graphs-r-base-graphs
# https://stackoverflow.com/questions/53578949/rank-order-cluster-sort-data-frame-by-column-pattern
# https://stackoverflow.com/questions/7201341/how-can-two-strings-be-concatenated
# http://www.sthda.com/english/wiki/add-titles-to-a-plot-in-r-software
# https://stat.ethz.ch/R-manual/R-devel/library/base/html/length.html
# https://stats.stackexchange.com/questions/5253/how-do-i-get-the-number-of-rows-of-a-data-frame-in-r/5256
# https://stackoverflow.com/questions/32712301/create-empty-data-frame-with-column-names-by-assigning-a-string-vector
# http://meme-suite.org/doc/ame-output-format.html?man_type=web
# https://www.r-statistics.com/tag/transpose/
# https://stat.ethz.ch/R-manual/R-devel/library/stats/html/dist.html
# http://www.sthda.com/english/wiki/beautiful-dendrogram-visualizations-in-r-5-must-known-methods-unsupervised-machine-learning#plot.hclust-r-base-function
# https://stackoverflow.com/questions/48280753/convert-presence-absence-matrix-to-distance-matrix
# https://datatofish.com/export-dataframe-to-csv-in-r/
# https://stackoverflow.com/questions/11454333/r-numbers-from-1-to-100
# https://stackoverflow.com/questions/3476782/check-if-the-number-is-integer
# Author: Rachel Woo
# Purpose: To Format and Display TOMTOM/MEME results
# Date: Mar. 2019
# Contact: rachelsam.woo@mail.utoronto.ca
###### 1. INSTALL REQUIRED PACKAGES ######
if (! requireNamespace("readr")) {
install.packages("readr")
}
if (! requireNamespace("ggplot2")) {
install.packages("ggplot2")
}
if (! requireNamespace("rlist")) {
install.packages(pkgs="rlist")
}
###### 2. IMPORT TOMTOM DATA INTO DATAFRAMES ######
rootDirectory = "C:/Users/rwoo/Desktop"
setwd(rootDirectory)
moduleList <- list()
for (i in 1:8) {
subpath = paste(rootDirectory, i, sep="/")
print(subpath)
setwd(subpath) # Paste concatenates strings
#Query_ID	Target_ID	Optimal_offset	p-value	E-value	q-value	Overlap	Query_consensus	Target_consensus	Orientation
moduleDF <- readr::read_tsv(file.path(".", "tomtom.tsv"),
skip = 1, #skip gets rid of header
col_names = c("Query_ID",	"Target_ID",	"Optimal_offset",
"p-value",	"	E-value",	"q-value",
"Overlap",	"Query_consensus",	"Target_consensus",
"Orientation"))
moduleList[[i]] <- moduleDF
setwd(rootDirectory)
getwd()
}
# Get rid of rows that do not contain data (Last 3 rows)
for (i in 1:length(moduleList)) {
module <- moduleList[[i]]
deleteColumns <- c(nrow(module), (nrow(module) - 1), (nrow(module) - 2))
moduleList[[i]] <- module[-deleteColumns,]
}
#Verify, works some errors
test = moduleList[[1]]
###### ANALYSIS 1: Show Number Recognized for each one########
freqList <- list()
for (module in (moduleList)) {
testTable = data.frame(table(module$Query_ID))
freqList[[i]] <- testTable
}
View(moduleList[[2]])
for (module in freqList){
barplot(module$Freq, names = module$var1)
#barplot(uk2007$Production, names = uk2007$Commodity,
#   xlab = "Commodity", ylab = "Production (1,000 MT)",
#  main = "UK 2007 Top 5 Food and Agricultural Commodities")
}
#Q value of 10% needed
path <-"C:/Users/rwoo/Desktop/"
setwd(path)
oma <- readr::read_tsv(file.path(".", "orthoREAL.tsv"),
skip = 1, #skip gets rid of header
col_names = c("elegans", "brig", "type", "oma"))
View(oma)
omaTest <- oma[type == "1:1"]
omaTest <- oma[oma$type == "1:1"]
omaTest <- oma[oma$type == "1:1",]
View(omaTest)
omaTest <- oma[oma$type == "1:1", elegans, brig] #only take 1:1 orthologs
View(omaTest)
omaTest <- oma[oma$type == "1:1", c(elegans, brig)] #only take 1:1 orthologs
omaTest <- oma[oma$type == "1:1", c("elegans", "brig")] #only take 1:1 orthologs
View(omaTest)
rootDirectory = "C:/Users/rwoo/Documents/BCB330/330 workflow/Get orthologs/biomart input txt get ortho"
setwd(rootDirectory)
moduleList <- list()
for (i in 1:14) {
filename = paste0(str(i), ".txt")
moduleDF <- readr::read_tsv(file.path(".", "filename"),
skip = 0, #skip gets rid of header
col_names = c("elegans"))
}
rootDirectory = "C:/Users/rwoo/Documents/BCB330/330 workflow/Get orthologs/biomart input txt get ortho"
setwd(rootDirectory)
moduleList <- list()
for (i in 1:14) {
filename = paste0(str(i), ".txt")
str(filename) <- readr::read_tsv(file.path(".", filename),
skip = 0, #skip gets rid of header
col_names = c("elegans"))
}
rootDirectory = "C:/Users/rwoo/Documents/BCB330/330 workflow/Get orthologs/biomart input txt get ortho"
setwd(rootDirectory)
moduleList <- list()
for (i in 1:14) {
print(i)
filename = paste0(str(i), ".txt")
str(filename) <- readr::read_tsv(file.path(".", filename),
skip = 0, #skip gets rid of header
col_names = c("elegans"))
}
print(filename)
rootDirectory = "C:/Users/rwoo/Documents/BCB330/330 workflow/Get orthologs/biomart input txt get ortho"
setwd(rootDirectory)
moduleList <- list()
for (i in 1:14) {
print(i)
filename = paste0(str(i), ".txt")
print(filename)
str(filename) <- readr::read_tsv(file.path(".", filename),
skip = 0, #skip gets rid of header
col_names = c("elegans"))
}
paste0("1", ".txt")
moduleList <- list()
for (i in 1:14) {
print("filename")
filename = paste0(str(i), ".txt")
print(filename)
str(filename) <- readr::read_tsv(file.path(".", filename),
skip = 0, #skip gets rid of header
col_names = c("elegans"))
}
###### 2. IMPORT ELEGANS NAMES TO GET CONVERTED ######
rootDirectory = "C:/Users/rwoo/Documents/BCB330/330 workflow/Get orthologs/biomart input txt get ortho"
setwd(rootDirectory)
moduleList <- list()
for (i in 1:14) {
print("filename")
filename = paste0(str(i), ".txt")
print(filename)
str(filename) <- readr::read_tsv(file.path(".", filename),
skip = 0, #skip gets rid of header
col_names = c("elegans"))
}
