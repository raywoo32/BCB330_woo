#' @param toConvert filepath to a plain text file of ids matching OMA ids for species 1
#' @param sp1Name species name for genes from toConvert
#'
#' @return df of
#' @export
#'
#' @examples
getToConvert <- function(toConvert, sp1Name) {
toConvert <- readr::read_tsv(file.path(toConvert),
skip = 0, #skip gets rid of header
col_names = c(sp1Name))
return(toConvert)
}
mod1 <- getToConvert("C:/Users/rwoo/Documents/BCB330/330 workflow/Get orthologs/biomart input txt get ortho/1.txt", "elegans")
renamedMerge["brig"]
BrigList <- renamedMerge["brig"]
capture.output(summary(BrigList), file = "1.txt")
getwd()
capture.output(BrigList, file = "1.txt")
lapply(BrigList, write, "1.txt", append=TRUE, ncolumns=1000)
oma <- getOMA("C:/Users/rwoo/Desktop/orthoREAL.tsv", "elegans", "brig")
oma <- renameOMA(oma)
path = "C:/Users/rwoo/Documents/BCB330/330 workflow/Get orthologs/biomart input txt get ortho/"
for (i in 1:14) {
filepath = paste0(path, toString(i), ".txt")
mod <- getToConvert(filepath, "elegans")
merged <- merge(oma, mod)
orthoList <- renamedMerge["brig"]
outputFileName <- paste0(toString(i), ".txt")
lapply(orthoList, write, "1.txt", append=TRUE, ncolumns=10000)
}
for (i in 1:14) {
filepath = paste0(path, toString(i), ".txt")
mod <- getToConvert(filepath, "elegans")
merged <- merge(oma, mod)
orthoList <- renamedMerge["brig"]
outputFileName <- paste0(toString(i), ".txt")
lapply(orthoList, write, outputFileName, append=TRUE, ncolumns=10000)
}
for (i in 1:14) {
filepath = paste0(path, toString(i), ".txt")
mod <- getToConvert(filepath, "elegans")
merged <- merge(oma, mod)
orthoList <- merged["brig"]
outputFileName <- paste0(toString(i), ".txt")
lapply(orthoList, write, outputFileName, append=TRUE, ncolumns=10000)
}
ls
ls(environment)
rm(list=ls())
str <- "GAAAACCCCTCCAAAACCGTGTTCTTTCTGTTTCCTATTCATTTTTGTTCAGCTGCTCTAAATCGTTTTCGTCTTCCTCCAAAAACAGCTGAAAATGACCTCCGTTTTGCTTCTTTTCTTGTTTTTTCTTCCTCCTTTCCTATTTTTCCATGTCTCATTTTCAGTGTCTCAATCCCAGAACGCCTAACTTTTTTTTCCAG"
length(str)
size(str)
str.length()
import string
rootDirectory = "C:/Users/rwoo/Desktop"
setwd(rootDirectory)
moduleList <- list()
for (i in 1:8) {
subpath = paste(rootDirectory, i, sep="/")
print(subpath)
setwd(subpath) # Paste concatenates strings
#Query_ID	Target_ID	Optimal_offset	p-value	E-value	q-value	Overlap	Query_consensus	Target_consensus	Orientation
moduleDF <- readr::read_tsv(file.path(".", "tomtom.tsv"),
skip = 1, #skip gets rid of header
col_names = c("Query_ID",	"Target_ID",	"Optimal_offset",
"p-value",	"	E-value",	"q-value",
"Overlap",	"Query_consensus",	"Target_consensus",
"Orientation"))
moduleList[[i]] <- moduleDF
setwd(rootDirectory)
getwd()
}
###### 2. IMPORT TOMTOM DATA INTO DATAFRAMES ######
rootDirectory = "C:/Users/rwoo/Documents/BCB330_Github/results/elegans/meme_results/tomtom"
setwd(rootDirectory)
moduleList <- list()
for (i in 1:8) {
subpath = paste(rootDirectory, i, sep="/")
print(subpath)
setwd(subpath) # Paste concatenates strings
#Query_ID	Target_ID	Optimal_offset	p-value	E-value	q-value	Overlap	Query_consensus	Target_consensus	Orientation
moduleDF <- readr::read_tsv(file.path(".", "tomtom.tsv"),
skip = 1, #skip gets rid of header
col_names = c("Query_ID",	"Target_ID",	"Optimal_offset",
"p-value",	"	E-value",	"q-value",
"Overlap",	"Query_consensus",	"Target_consensus",
"Orientation"))
moduleList[[i]] <- moduleDF
setwd(rootDirectory)
getwd()
}
###### 2. IMPORT TOMTOM DATA INTO DATAFRAMES ######
rootDirectory = "C:/Users/rwoo/Documents/BCB330_Github/results/elegans/meme_results/tomtom"
setwd(rootDirectory)
moduleList <- list()
for (i in 1:14) {
subpath = paste(rootDirectory, i, sep="/")
print(subpath)
setwd(subpath) # Paste concatenates strings
#Query_ID	Target_ID	Optimal_offset	p-value	E-value	q-value	Overlap	Query_consensus	Target_consensus	Orientation
moduleDF <- readr::read_tsv(file.path(".", "tomtom.tsv"),
skip = 1, #skip gets rid of header
col_names = c("Query_ID",	"Target_ID",	"Optimal_offset",
"p-value",	"	E-value",	"q-value",
"Overlap",	"Query_consensus",	"Target_consensus",
"Orientation"))
moduleList[[i]] <- moduleDF
setwd(rootDirectory)
getwd()
}
View(moduleDF)
rootDirectory = "C:/Users/rwoo/Documents/BCB330_Github/results/elegans/meme_results/tomtom"
setwd(rootDirectory)
moduleList <- list()
for (i in 1:14) {
subpath = paste(rootDirectory, i, sep="/")
print(subpath)
setwd(subpath) # Paste concatenates strings
#Query_ID	Target_ID	Optimal_offset	p-value	E-value	q-value	Overlap	Query_consensus	Target_consensus	Orientation
moduleDF <- readr::read_tsv(file.path(".", "tomtom.tsv"),
skip = 4, #skip gets rid of header
col_names = c("Query_ID",	"Target_ID",	"Optimal_offset",
"p-value",	"	E-value",	"q-value",
"Overlap",	"Query_consensus",	"Target_consensus",
"Orientation"))
#  moduleDF <- moduleDF[-(1:3), , drop = FALSE]
#  moduleList[[i]] <- moduleDF
setwd(rootDirectory)
}
View(moduleDF)
rootDirectory = "C:/Users/rwoo/Documents/BCB330_Github/results/elegans/meme_results/tomtom"
setwd(rootDirectory)
moduleList <- list()
for (i in 1:14) {
subpath = paste(rootDirectory, i, sep="/")
print(subpath)
setwd(subpath) # Paste concatenates strings
#Query_ID	Target_ID	Optimal_offset	p-value	E-value	q-value	Overlap	Query_consensus	Target_consensus	Orientation
moduleDF <- readr::read_tsv(file.path(".", "tomtom.tsv"),
skip = 3, #skip gets rid of header
col_names = c("Query_ID",	"Target_ID",	"Optimal_offset",
"p-value",	"	E-value",	"q-value",
"Overlap",	"Query_consensus",	"Target_consensus",
"Orientation"))
#  moduleDF <- moduleDF[-(1:3), , drop = FALSE]
#  moduleList[[i]] <- moduleDF
setwd(rootDirectory)
}
View(moduleDF)
rootDirectory = "C:/Users/rwoo/Documents/BCB330_Github/results/elegans/meme_results/tomtom"
setwd(rootDirectory)
moduleList <- list()
for (i in 1:14) {
subpath = paste(rootDirectory, i, sep="/")
print(subpath)
setwd(subpath) # Paste concatenates strings
#Query_ID	Target_ID	Optimal_offset	p-value	E-value	q-value	Overlap	Query_consensus	Target_consensus	Orientation
moduleDF <- readr::read_tsv(file.path(".", "tomtom.tsv"),
skip = 0, #skip gets rid of header
col_names = c("Query_ID",	"Target_ID",	"Optimal_offset",
"p-value",	"	E-value",	"q-value",
"Overlap",	"Query_consensus",	"Target_consensus",
"Orientation"))
#  moduleDF <- moduleDF[-(1:3), , drop = FALSE]
#  moduleList[[i]] <- moduleDF
setwd(rootDirectory)
}
rootDirectory = "C:/Users/rwoo/Documents/BCB330_Github/results/elegans/meme_results/tomtom"
setwd(rootDirectory)
moduleList <- list()
for (i in 1:14) {
subpath = paste(rootDirectory, i, sep="/")
print(subpath)
setwd(subpath) # Paste concatenates strings
#Query_ID	Target_ID	Optimal_offset	p-value	E-value	q-value	Overlap	Query_consensus	Target_consensus	Orientation
moduleDF <- readr::read_tsv(file.path(".", "tomtom.tsv"),
skip = 1, #skip gets rid of header
col_names = c("Query_ID",	"Target_ID",	"Optimal_offset",
"p-value",	"	E-value",	"q-value",
"Overlap",	"Query_consensus",	"Target_consensus",
"Orientation"))
moduleDF <- moduleDF[-(1:3), , drop = FALSE]
moduleList[[i]] <- moduleDF
setwd(rootDirectory)
}
View(moduleDF)
###### 2. IMPORT TOMTOM DATA INTO DATAFRAMES ######
rootDirectory = "C:/Users/rwoo/Documents/BCB330_Github/results/elegans/meme_results/tomtom"
setwd(rootDirectory)
moduleList <- list()
for (i in 1:14) {
subpath = paste(rootDirectory, i, sep="/")
print(subpath)
setwd(subpath) # Paste concatenates strings
#Query_ID	Target_ID	Optimal_offset	p-value	E-value	q-value	Overlap	Query_consensus	Target_consensus	Orientation
moduleDF <- readr::read_tsv(file.path(".", "tomtom.tsv"),
skip = 1, #skip gets rid of header
col_names = c("Query_ID",	"Target_ID",	"Optimal_offset",
"p-value",	"	E-value",	"q-value",
"Overlap",	"Query_consensus",	"Target_consensus",
"Orientation"))
moduleList[[i]] <- moduleDF
setwd(rootDirectory)
}
View(moduleDF)
rootDirectory = "C:/Users/rwoo/Documents/BCB330_Github/results/elegans/meme_results/tomtom"
setwd(rootDirectory)
moduleList <- list()
for (i in 1:14) {
subpath = paste(rootDirectory, i, sep="/")
print(subpath)
setwd(subpath) # Paste concatenates strings
#Query_ID	Target_ID	Optimal_offset	p-value	E-value	q-value	Overlap	Query_consensus	Target_consensus	Orientation
moduleDF <- readr::read_tsv(file.path(".", "tomtom.tsv"),
skip = 1, #skip gets rid of header
col_names = c("Query_ID",	"Target_ID",	"Optimal_offset",
"p-value",	"	E-value",	"q-value",
"Overlap",	"Query_consensus",	"Target_consensus",
"Orientation"))
moduleDG <- moduleDF[-seq(nrow(moduleDF), nrow(moduleDF) -4 ),]
moduleList[[i]] <- moduleDF
setwd(rootDirectory)
}
rootDirectory = "C:/Users/rwoo/Documents/BCB330_Github/results/elegans/meme_results/tomtom"
setwd(rootDirectory)
moduleList <- list()
for (i in 1:14) {
subpath = paste(rootDirectory, i, sep="/")
print(subpath)
setwd(subpath) # Paste concatenates strings
#Query_ID	Target_ID	Optimal_offset	p-value	E-value	q-value	Overlap	Query_consensus	Target_consensus	Orientation
moduleDF <- readr::read_tsv(file.path(".", "tomtom.tsv"),
skip = 1, #skip gets rid of header
col_names = c("Query_ID",	"Target_ID",	"Optimal_offset",
"p-value",	"	E-value",	"q-value",
"Overlap",	"Query_consensus",	"Target_consensus",
"Orientation"))
moduleDF <- moduleDF[-seq(nrow(moduleDF), nrow(moduleDF) - 3 ),]
moduleList[[i]] <- moduleDF
setwd(rootDirectory)
}
View(moduleDF)
###### 2. IMPORT TOMTOM DATA INTO DATAFRAMES ######
rootDirectory = "C:/Users/rwoo/Documents/BCB330_Github/results/elegans/meme_results/tomtom"
setwd(rootDirectory)
moduleList <- list()
for (i in 1:14) {
subpath = paste(rootDirectory, i, sep="/")
print(subpath)
setwd(subpath) # Paste concatenates strings
#Query_ID	Target_ID	Optimal_offset	p-value	E-value	q-value	Overlap	Query_consensus	Target_consensus	Orientation
moduleDF <- readr::read_tsv(file.path(".", "tomtom.tsv"),
skip = 1, #skip gets rid of header
col_names = c("Query_ID",	"Target_ID",	"Optimal_offset",
"p-value",	"	E-value",	"q-value",
"Overlap",	"Query_consensus",	"Target_consensus",
"Orientation"))
#moduleDF <- moduleDF[-seq(nrow(moduleDF), nrow(moduleDF) - 3 ),]
moduleList[[i]] <- moduleDF
setwd(rootDirectory)
}
View(moduleDF)
rootDirectory = "C:/Users/rwoo/Documents/BCB330_Github/results/elegans/meme_results/tomtom"
setwd(rootDirectory)
moduleList <- list()
for (i in 1:14) {
subpath = paste(rootDirectory, i, sep="/")
print(subpath)
setwd(subpath) # Paste concatenates strings
#Query_ID	Target_ID	Optimal_offset	p-value	E-value	q-value	Overlap	Query_consensus	Target_consensus	Orientation
moduleDF <- readr::read_tsv(file.path(".", "tomtom.tsv"),
skip = 1, #skip gets rid of header
col_names = c("Query_ID",	"Target_ID",	"Optimal_offset",
"p-value",	"	E-value",	"q-value",
"Overlap",	"Query_consensus",	"Target_consensus",
"Orientation"))
moduleDF <- moduleDF[-seq(nrow(moduleDF), nrow(moduleDF) - 2 ),]
moduleList[[i]] <- moduleDF
setwd(rootDirectory)
}
View(moduleDF)
test = moduleList[[1]]
View(test)
for (module in moduleList) {
module <- module[module$q-value <= 0.1, ]
}
###### Only keep Q value below 10% ######
for (module in moduleList) {
module <- module[module$"q-value" <= 0.1, ]
}
View(module)
###### Only keep Q value below 10% ######
for (module in moduleList) {
module <- module[module$"q-value" <= 0.1, ]
print(module)
}
###### 2. IMPORT TOMTOM DATA INTO DATAFRAMES ######
rootDirectory = "C:/Users/rwoo/Documents/BCB330_Github/results/elegans/meme_results/tomtom"
setwd(rootDirectory)
moduleList <- list()
for (i in 1:14) {
subpath = paste(rootDirectory, i, sep="/")
print(subpath)
setwd(subpath) # Paste concatenates strings
#Query_ID	Target_ID	Optimal_offset	p-value	E-value	q-value	Overlap	Query_consensus	Target_consensus	Orientation
moduleDF <- readr::read_tsv(file.path(".", "tomtom.tsv"),
skip = 1, #skip gets rid of header
col_names = c("Query_ID",	"Target_ID",	"Optimal_offset",
"p-value",	"	E-value",	"q-value",
"Overlap",	"Query_consensus",	"Target_consensus",
"Orientation"))
moduleDF <- moduleDF[-seq(nrow(moduleDF), nrow(moduleDF) - 2 ),] #remove last 3 rows
moduleList[[i]] <- moduleDF
setwd(rootDirectory)
}
matchedList <- list()
for (module in moduleList) {
matched <- module[module$"q-value" <= 0.1, ]
matchedList <- c(matchedList, matched)
}
View(matchedList)
matchedList <- list()
for (module in moduleList) {
matched <- module[module$"q-value" <= 0.1, ]
matchedList <- c(matchedList, matched)
}
###### 2. IMPORT TOMTOM DATA INTO DATAFRAMES ######
rootDirectory = "C:/Users/rwoo/Documents/BCB330_Github/results/elegans/meme_results/tomtom"
setwd(rootDirectory)
moduleList <- list()
for (i in 1:14) {
subpath = paste(rootDirectory, i, sep="/")
print(subpath)
setwd(subpath) # Paste concatenates strings
#Query_ID	Target_ID	Optimal_offset	p-value	E-value	q-value	Overlap	Query_consensus	Target_consensus	Orientation
moduleDF <- readr::read_tsv(file.path(".", "tomtom.tsv"),
skip = 1, #skip gets rid of header
col_names = c("Query_ID",	"Target_ID",	"Optimal_offset",
"p-value",	"	E-value",	"q-value",
"Overlap",	"Query_consensus",	"Target_consensus",
"Orientation"))
moduleDF <- moduleDF[-seq(nrow(moduleDF), nrow(moduleDF) - 2 ),] #remove last 3 rows
moduleList[[i]] <- moduleDF
setwd(rootDirectory)
}
###### Only keep Q value below 10% ######
for (i in 1:14) {
filePath = paste0("C:/Users/rwoo/Desktop/", toString(i), "tomtom")
matched <- moduleList[[i]][module$"q-value" <= 0.1, ]
write.csv(matched, filePath)
}
View(matched)
###### Only keep Q value below 10% ######
for (i in 1:14) {
filePath = paste0("C:/Users/rwoo/Desktop/", toString(i), "tomtom.txt")
matched <- moduleList[[i]][module$"q-value" <= 0.1, ]
write.csv(matched, filePath)
}
for (module in moduleList) {
matched <- module[module$"q-value" <= 0.1, ]
print(matched)
}
for (module in moduleList) {
filePath = paste0("C:/Users/rwoo/Desktop/", toString(i), "tomtom.txt")
matched <- module[module$"q-value" <= 0.1, ]
write.csv(matched, filePath)
print(matched)
}
for (module in moduleList) {
filePath = paste0("C:/Users/rwoo/Desktop/", toString(i), "tomtom.txt")
matched <- module[module$"q-value" <= 0.1, ]
write.csv(matched, filePath)
print(matched)
}
for (module in moduleList) {
filePath = paste0("C:/Users/rwoo/Desktop/", toString(i), "tomtom.txt")
matched <- module[module$"q-value" <= 0.1, ]
write.csv(matched, filePath)
print(matched)
}
for (i in 1:14) {
print(i)
matched <- moduleList[[i]][module$"q-value" <= 0.1, ]
print(matched)
}
i = 1
for (module in moduleList) {
i <- i + 1
print(i)
filePath = paste0("C:/Users/rwoo/Desktop/", "tomtom.txt")
matched <- module[module$"q-value" <= 0.1, ]
write.csv(matched, filePath)
print(matched)
}
i = 0
for (module in moduleList) {
i <- i + 1
print(i)
filePath = paste0("C:/Users/rwoo/Desktop/", "tomtom.txt")
matched <- module[module$"q-value" <= 0.1, ]
write.csv(matched, filePath)
print(matched)
}
i = 0
for (module in moduleList) {
i <- i + 1
print(i)
filePath = paste0("C:/Users/rwoo/Desktop/", toString(i), "tomtom.txt")
matched <- module[module$"q-value" <= 0.1, ]
write.csv(matched, filePath)
print(matched)
}
3low <- matchedList[[3]][module$"q-value" <= 0.1, ]
matchedList[[3]]
i = 0
for (module in moduleList) {
i <- i + 1
print(i)
filePath = paste0("C:/Users/rwoo/Desktop/", toString(i), "tomtom.txt")
matched <- module[module$"q-value" <= 0.1, ]
print(unique(matched$Query_ID))
write.csv(matched, filePath)
print(matched)
}
# Significant on
i = 0
for (module in moduleList) {
i <- i + 1
print(i)
filePath = paste0("C:/Users/rwoo/Desktop/", toString(i), "tomtom.txt")
matched <- module[module$"q-value" <= 0.1, ]
print(unique(matched$Query_ID))
write.csv(matched, filePath)
#print(matched)
}
wd <- "C:/Users/rwoo/Documents/BCB330_Github/results/elegans/meme_results"
for (i in 1:14) {
filepath <- paste0(wd, toString(i), "meme.xml")
check <- getMeme(filepath)
}
getMeme <- function(filepath) {
sysComponent <- readxl::read_excel(filepath, sheet = "component", skip = 1)
sysHGNC <- sysComponent$sym[sysComponent$molType == "protein"]
return(sysHGNC)
}
wd <- "C:/Users/rwoo/Documents/BCB330_Github/results/elegans/meme_results"
for (i in 1:14) {
filepath <- paste0(wd, toString(i), "meme.xml")
check <- getMeme(filepath)
}
wd <- "C:/Users/rwoo/Documents/BCB330_Github/results/elegans/meme_results/"
for (i in 1:14) {
filepath <- paste0(wd, toString(i), "meme.xml")
check <- getMeme(filepath)
}
wd <- "C:/Users/rwoo/Documents/BCB330_Github/results/elegans/meme_results/"
for (i in 1:14) {
filepath <- paste0(wd, toString(i), "meme.xml")
check <- getMeme(filepath)
}
wd <- "C:/Users/rwoo/Documents/BCB330_Github/results/elegans/meme_results/"
for (i in 1:14) {
filepath <- paste0(wd, toString(i), "/meme.xml")
check <- getMeme(filepath)
}
wd <- "C:/Users/rwoo/Documents/BCB330_Github/results/elegans/meme_results/"
for (i in 1:14) {
filepath <- paste0(wd, toString(i), "/meme.xml")
check <- getMeme(filepath)
}
#### 1. HELPER FUNCTIONS
getMeme <- function(filepath) {
meme <- XML::xmlParse(file = filepath)
#sysHGNC <- sysComponent$sym[sysComponent$molType == "protein"]
return(meme)
}
#### 1. HELPER FUNCTIONS
getMeme <- function(filepath) {
meme <- XML::xmlParse(file = filepath)
#sysHGNC <- sysComponent$sym[sysComponent$molType == "protein"]
return(meme)
}
#### 3. READ IN RESULTS
wd <- "C:/Users/rwoo/Documents/BCB330_Github/results/elegans/meme_results/"
for (i in 1:14) {
filepath <- paste0(wd, toString(i), "/meme.xml")
check <- getMeme(filepath)
}
getMeme("")
#### 3. READ IN RESULTS
wd <- "C:/Users/rwoo/Documents/BCB330_Github/results/elegans/meme_results/"
for (i in 1:14) {
filepath <- paste0(wd, toString(i), "/meme.xml")
check <- getMeme(filepath)
}
#### 3. READ IN RESULTS
wd <- "C:/Users/rwoo/Documents/BCB330_Github/results/elegans/meme_results/"
for (i in 1:14) {
filepath <- paste0(wd, toString(i), "/meme.xml")
check <- getMeme(filepath)
}
#### 3. READ IN RESULTS
wd <- "C:/Users/rwoo/Documents/BCB330_Github/results/elegans/meme_results/"
for (i in 1:14) {
filepath <- paste0(wd, toString(i), "/meme.xml")
check <- getMeme(filepath)
}
check
library(biomaRt)
wormbase = useMart("wormbase_current", dataset = "wormbase_gene")
source('~/BCB330_Github/results/elegans/meme_results/formatTomTom.R')
