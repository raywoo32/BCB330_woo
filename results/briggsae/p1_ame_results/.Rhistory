print(initialName)
firstPeriod <- FALSE
newName = ""
num = c("1", "2", "3", "4", "5", "6", "7", "8", "9", "10")
initialName <- strsplit(initialName, "")[[1]]
for (char in initialName) {
print(char)
if (char == ".") {
firstPeriod <- TRUE
next
}
if (firstPeriod == FALSE) {
newName = paste0(newName, char)
}
else {
if (char %in% num) {
newName = paste0(newName, char)
}
else{
break
}
}
}
print("new")
print(newName)
oma[[i, 1]] <- newName
}
}
renameOMA(omaTest)
renameOMA <- function(oma) {
for (i in 1:length(rownames(oma))){
initialName = oma[[i, 1]]
print("initial")
print(initialName)
firstPeriod <- FALSE
newName = ""
num = c("1", "2", "3", "4", "5", "6", "7", "8", "9", "10")
initialName <- strsplit(initialName, "")[[1]]
for (char in initialName) {
if (char == ".") {
firstPeriod <- TRUE
newName = paste0(newName, char)
next
}
if (firstPeriod == FALSE) {
newName = paste0(newName, char)
}
else {
if (char %in% num) {
newName = paste0(newName, char)
}
else{
break
}
}
}
print("new")
print(newName)
oma[[i, 1]] <- newName
}
}
renameOMA(omaTest)
View(omaTest)
View(omaTest)
omaTest
omaTest2 <- getOMA("C:/Users/rwoo/Desktop/orthoREAL.tsv", "elegans", "brig")
omaTest2[1, 1]
omaTest2[1, 1] <- "Duck"
omaTest2[1, 1]
rm(omaTest2)
renameOMA <- function(oma) {
for (i in 1:length(rownames(oma))){
initialName = oma[[i, 1]]
print("initial")
print(initialName)
firstPeriod <- FALSE
newName = ""
num = c("1", "2", "3", "4", "5", "6", "7", "8", "9", "10")
initialName <- strsplit(initialName, "")[[1]]
for (char in initialName) {
if (char == ".") {
firstPeriod <- TRUE
newName = paste0(newName, char)
next
}
if (firstPeriod == FALSE) {
newName = paste0(newName, char)
}
else {
if (char %in% num) {
newName = paste0(newName, char)
}
else{
break
}
}
}
print("new")
print(newName)
oma[[i, 1]] <- newName
return(oma)
}
}
omaRename <- renameOMA(omaTest)
View(omaRename)
renameOMA <- function(oma) {
for (i in 1:length(rownames(oma))){
initialName = oma[[i, 1]]
firstPeriod <- FALSE
newName = ""
num = c("1", "2", "3", "4", "5", "6", "7", "8", "9", "10")
initialName <- strsplit(initialName, "")[[1]]
for (char in initialName) {
if (char == ".") {
firstPeriod <- TRUE
newName = paste0(newName, char)
next
}
if (firstPeriod == FALSE) {
newName = paste0(newName, char)
}
else {
if (char %in% num) {
newName = paste0(newName, char)
}
else{
break
}
}
}
oma[[i, 1]] <- newName
return(oma)
}
}
omaRename <- renameOMA(omaTest)
View(omaRename)
renameOMA <- function(oma) {
for (i in 1:length(rownames(oma))){
initialName = oma[[i, 1]]
firstPeriod <- FALSE
newName = ""
num = c("1", "2", "3", "4", "5", "6", "7", "8", "9", "10")
initialName <- strsplit(initialName, "")[[1]]
for (char in initialName) {
if (char == ".") {
firstPeriod <- TRUE
newName = paste0(newName, char)
next
}
if (firstPeriod == FALSE) {
newName = paste0(newName, char)
}
else {
if (char %in% num) {
newName = paste0(newName, char)
}
else{
break
}
}
}
oma[[i, 1]] <- newName
return(oma)
}
}
renameOMA <- function(oma) {
for (i in 1:length(rownames(oma))){
initialName = oma[[i, 1]]
firstPeriod <- FALSE
newName = ""
num = c("1", "2", "3", "4", "5", "6", "7", "8", "9", "10")
initialName <- strsplit(initialName, "")[[1]]
for (char in initialName) {
if (char == ".") {
firstPeriod <- TRUE
newName = paste0(newName, char)
next
}
if (firstPeriod == FALSE) {
newName = paste0(newName, char)
}
else {
if (char %in% num) {
newName = paste0(newName, char)
}
else{
break
}
}
}
oma[[i, 1]] <- newName
return(oma[[i, 1]])
return(oma)
}
}
omaRename <- renameOMA(omaTest)
View(omaTest)
omaTest = omaTest[-1,]
View(omaTest)
omaRename <- renameOMA(omaTest)
View(omaTest)
renameOMA <- function(oma) {
for (i in 1:length(rownames(oma))){
initialName = oma[[i, 1]]
firstPeriod <- FALSE
newName = ""
num = c("1", "2", "3", "4", "5", "6", "7", "8", "9", "10")
initialName <- strsplit(initialName, "")[[1]]
for (char in initialName) {
if (char == ".") {
firstPeriod <- TRUE
newName = paste0(newName, char)
next
}
if (firstPeriod == FALSE) {
newName = paste0(newName, char)
}
else {
if (char %in% num) {
newName = paste0(newName, char)
}
else{
break
}
}
}
oma[[i, 1]] <- newName
return(oma)
}
}
omaRename <- renameOMA(omaTest)
View(omaRename)
renameOMA <- function(oma) {
for (i in 1:length(rownames(oma))){
initialName = oma[[i, 1]]
firstPeriod <- FALSE
newName = ""
num = c("1", "2", "3", "4", "5", "6", "7", "8", "9", "10")
initialName <- strsplit(initialName, "")[[1]]
for (char in initialName) {
if (char == ".") {
firstPeriod <- TRUE
newName = paste0(newName, char)
next
}
if (firstPeriod == FALSE) {
newName = paste0(newName, char)
}
else {
if (char %in% num) {
newName = paste0(newName, char)
}
else{
break
}
}
}
oma[[i, 1]] <- newName
}
return(oma)
}
omaRename <- renameOMA(omaTest)
renameOMA <- function(oma) {
for (i in 1:length(rownames(oma))){
initialName = oma[[i, 1]]
firstPeriod <- FALSE
newName = ""
num = c("1", "2", "3", "4", "5", "6", "7", "8", "9", "10")
initialName <- strsplit(initialName, "")[[1]]
for (char in initialName) {
if (char == "." && firstPeriod == FALSE) {
firstPeriod <- TRUE
newName = paste0(newName, char)
next
}
if (firstPeriod == FALSE) {
newName = paste0(newName, char)
}
else {
if (char %in% num) {
newName = paste0(newName, char)
}
else{
break
}
}
}
oma[[i, 1]] <- newName
}
return(oma)
}
omaRename <- renameOMA(omaTest)
renameOMA <- function(oma) {
for (i in 1:length(rownames(oma))){
initialName = oma[[i, 1]]
firstPeriod <- FALSE
newName = ""
num = c("0", "1", "2", "3", "4", "5", "6", "7", "8", "9")
initialName <- strsplit(initialName, "")[[1]]
for (char in initialName) {
if (char == "." && firstPeriod == FALSE) {
firstPeriod <- TRUE
newName = paste0(newName, char)
next
}
if (firstPeriod == FALSE) {
newName = paste0(newName, char)
}
else {
if (char %in% num) {
newName = paste0(newName, char)
}
else{
break
}
}
}
oma[[i, 1]] <- newName
}
return(oma)
}
omaRename <- renameOMA(omaTest)
omaTest <- getOMA("C:/Users/rwoo/Desktop/orthoREAL.tsv", "elegans", "brig")
omaRename <- renameOMA(omaTest)
renamedMerge <- merge(oma, mod1)
View(renamedMerge)
renamedMerge <- merge(omaRename, mod1)
#' Title
#'
#' @param toConvert filepath to a plain text file of ids matching OMA ids for species 1
#' @param sp1Name species name for genes from toConvert
#'
#' @return df of
#' @export
#'
#' @examples
getToConvert <- function(toConvert, sp1Name) {
toConvert <- readr::read_tsv(file.path(toConvert),
skip = 0, #skip gets rid of header
col_names = c(sp1Name))
return(toConvert)
}
mod1 <- getToConvert("C:/Users/rwoo/Documents/BCB330/330 workflow/Get orthologs/biomart input txt get ortho/1.txt", "elegans")
renamedMerge["brig"]
BrigList <- renamedMerge["brig"]
capture.output(summary(BrigList), file = "1.txt")
getwd()
capture.output(BrigList, file = "1.txt")
lapply(BrigList, write, "1.txt", append=TRUE, ncolumns=1000)
oma <- getOMA("C:/Users/rwoo/Desktop/orthoREAL.tsv", "elegans", "brig")
oma <- renameOMA(oma)
path = "C:/Users/rwoo/Documents/BCB330/330 workflow/Get orthologs/biomart input txt get ortho/"
for (i in 1:14) {
filepath = paste0(path, toString(i), ".txt")
mod <- getToConvert(filepath, "elegans")
merged <- merge(oma, mod)
orthoList <- renamedMerge["brig"]
outputFileName <- paste0(toString(i), ".txt")
lapply(orthoList, write, "1.txt", append=TRUE, ncolumns=10000)
}
for (i in 1:14) {
filepath = paste0(path, toString(i), ".txt")
mod <- getToConvert(filepath, "elegans")
merged <- merge(oma, mod)
orthoList <- renamedMerge["brig"]
outputFileName <- paste0(toString(i), ".txt")
lapply(orthoList, write, outputFileName, append=TRUE, ncolumns=10000)
}
for (i in 1:14) {
filepath = paste0(path, toString(i), ".txt")
mod <- getToConvert(filepath, "elegans")
merged <- merge(oma, mod)
orthoList <- merged["brig"]
outputFileName <- paste0(toString(i), ".txt")
lapply(orthoList, write, outputFileName, append=TRUE, ncolumns=10000)
}
ls
ls(environment)
rm(list=ls())
rootDirectory = "C:/Users/rwoo/Documents/BCB330_Github/results/brig/p1_ame_results"
setwd(rootDirectory)
moduleList <- list()
for (i in 1:14) {
subpath = paste(rootDirectory, i, sep="/")
print(subpath)
setwd(subpath) # Paste concatenates strings
moduleDF <- readr::read_tsv(file.path(".", "ame.tsv"),
skip = 1, #skip gets rid of header
col_names = c("rank",	"motif_DB",	"motif_ID",
"motif_alt_ID",	"consensus",	"p-value",
"adj_p-value",	"E-value",	"tests",
"FASTA_max",	"pos",	"neg",	"PWM_min",
"TP","	%TP",	"FP",	"%FP"))
moduleList[[i]] <- moduleDF
setwd(rootDirectory)
getwd()
}
setwd(rootDirectory)
rootDirectory = "C:/Users/rwoo/Documents/BCB330_Github/results/brig/p1_ame_results"
setwd(rootDirectory)
moduleList <- list()
for (i in 1:14) {
subpath = paste(rootDirectory, i, sep="/")
print(subpath)
setwd(subpath) # Paste concatenates strings
moduleDF <- readr::read_tsv(file.path(".", "ame.tsv"),
skip = 1, #skip gets rid of header
col_names = c("rank",	"motif_DB",	"motif_ID",
"motif_alt_ID",	"consensus",	"p-value",
"adj_p-value",	"E-value",	"tests",
"FASTA_max",	"pos",	"neg",	"PWM_min",
"TP","	%TP",	"FP",	"%FP"))
moduleList[[i]] <- moduleDF
setwd(rootDirectory)
getwd()
}
# Get rid of rows that do not contain data (Last 3 rows)
for (i in 1:length(moduleList)) {
module <- moduleList[[i]]
deleteColumns <- c(nrow(module), (nrow(module) - 1), (nrow(module) - 2))
moduleList[[i]] <- module[-deleteColumns,]
}
rootDirectory = "C:/Users/rwoo/Documents/BCB330_Github/results/brig/p1_ame_results"
rootDirectory = "C:/Users/rwoo/Documents/BCB330_Github/results/brig/p1_ame_results"
moduleList <- list()
for (i in 1:14) {
subpath = paste(rootDirectory, i, sep="/")
moduleDF <- readr::read_tsv(file.path(subpath, "ame.tsv"),
skip = 1, #skip gets rid of header
col_names = c("rank",	"motif_DB",	"motif_ID",
"motif_alt_ID",	"consensus",	"p-value",
"adj_p-value",	"E-value",	"tests",
"FASTA_max",	"pos",	"neg",	"PWM_min",
"TP","	%TP",	"FP",	"%FP"))
moduleList[[i]] <- moduleDF
setwd(rootDirectory)
getwd()
}
# Get rid of ro
rootDirectory = "C:/Users/rwoo/Documents/BCB330_Github/results/brig/p1_ame_results"
moduleList <- list()
notIn = c(1, 8, 9, 13, 14)
for (i in 1:14) {
if (i %in% notIn) {
next
}
subpath = paste(rootDirectory, i, sep="/")
moduleDF <- readr::read_tsv(file.path(subpath, "ame.tsv"),
skip = 1, #skip gets rid of header
col_names = c("rank",	"motif_DB",	"motif_ID",
"motif_alt_ID",	"consensus",	"p-value",
"adj_p-value",	"E-value",	"tests",
"FASTA_max",	"pos",	"neg",	"PWM_min",
"TP","	%TP",	"FP",	"%FP"))
moduleList[[i]] <- moduleDF
setwd(rootDirectory)
getwd()
}
# Get rid of rows
###### 2. IMPORT AME DATA INTO DATAFRAMES ######
rootDirectory = "C:/Users/rwoo/Documents/BCB330_Github/results/briggsae/p1_ame_results"
moduleList <- list()
notIn = c(1, 8, 9, 13, 14)
for (i in 1:14) {
if (i %in% notIn) {
next
}
subpath = paste(rootDirectory, i, sep="/")
moduleDF <- readr::read_tsv(file.path(subpath, "ame.tsv"),
skip = 1, #skip gets rid of header
col_names = c("rank",	"motif_DB",	"motif_ID",
"motif_alt_ID",	"consensus",	"p-value",
"adj_p-value",	"E-value",	"tests",
"FASTA_max",	"pos",	"neg",	"PWM_min",
"TP","	%TP",	"FP",	"%FP"))
moduleList[[i]] <- moduleDF
setwd(rootDirectory)
getwd()
}
# Get rid of rows that do not contain data (Last 3 rows)
for (i in 1:length(moduleList)) {
module <- moduleList[[i]]
deleteColumns <- c(nrow(module), (nrow(module) - 1), (nrow(module) - 2))
moduleList[[i]] <- module[-deleteColumns,]
}
###### 3. INITIALIZE EMPTY MATRICIES ######
# Initialize 3 empty matricies for 3 different trees
binaryMatrix <- data.frame(matrix(0, nrow = 100, ncol = 14))
evalMatrix <- data.frame(matrix(0, nrow = 100, ncol = 14))
tpMatrix <- data.frame(matrix(0, nrow = 100, ncol = 14))
# Vector to name rows of dataframe
colNames <- c("1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14")
colnames(evalMatrix) <- colNames
colnames(tpMatrix) <- colNames
colnames(binaryMatrix) <- colNames
###### ANALYSIS 1: BINARY ########
# 1. Add data into Empty Matrix
for (moduleIndex in 1:length(moduleList)) {
module = moduleList[[moduleIndex]]
for (i in 1:NROW(module)) {
motif_ID = module$motif_ID[i]
binaryMatrix[motif_ID, moduleIndex] <- 1
}
}
#write.csv(binaryMatrix,"C:/Users/rwoo/Desktop/p1_ame_results/elegansAMEp1_binary.csv",
row.names = TRUE)
#Flip the matrix for correct input value
distanceInputBinary <- t(binaryMatrix)
distanceMatrixBinary <- dist(distanceInputBinary, method = "binary")
clusterBinary <- hclust(distanceMatrixBinary)
# Plot
plot(clusterBinary, main="", xlab="", ylab="Height", sub="")
